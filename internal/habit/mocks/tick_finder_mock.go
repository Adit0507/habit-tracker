// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i habits/internal/habit.tickFinder -o tick_finder_mock.go -n TickFinderMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TickFinderMock implements mm_habit.tickFinder
type TickFinderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcFindWeeklyTicks          func()
	funcFindWeeklyTicksOrigin    string
	inspectFuncFindWeeklyTicks   func()
	afterFindWeeklyTicksCounter  uint64
	beforeFindWeeklyTicksCounter uint64
	FindWeeklyTicksMock          mTickFinderMockFindWeeklyTicks
}

// NewTickFinderMock returns a mock for mm_habit.tickFinder
func NewTickFinderMock(t minimock.Tester) *TickFinderMock {
	m := &TickFinderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindWeeklyTicksMock = mTickFinderMockFindWeeklyTicks{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTickFinderMockFindWeeklyTicks struct {
	optional           bool
	mock               *TickFinderMock
	defaultExpectation *TickFinderMockFindWeeklyTicksExpectation
	expectations       []*TickFinderMockFindWeeklyTicksExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TickFinderMockFindWeeklyTicksExpectation specifies expectation struct of the tickFinder.FindWeeklyTicks
type TickFinderMockFindWeeklyTicksExpectation struct {
	mock *TickFinderMock

	returnOrigin string
	Counter      uint64
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Optional() *mTickFinderMockFindWeeklyTicks {
	mmFindWeeklyTicks.optional = true
	return mmFindWeeklyTicks
}

// Expect sets up expected params for tickFinder.FindWeeklyTicks
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Expect() *mTickFinderMockFindWeeklyTicks {
	if mmFindWeeklyTicks.mock.funcFindWeeklyTicks != nil {
		mmFindWeeklyTicks.mock.t.Fatalf("TickFinderMock.FindWeeklyTicks mock is already set by Set")
	}

	if mmFindWeeklyTicks.defaultExpectation == nil {
		mmFindWeeklyTicks.defaultExpectation = &TickFinderMockFindWeeklyTicksExpectation{}
	}

	return mmFindWeeklyTicks
}

// Inspect accepts an inspector function that has same arguments as the tickFinder.FindWeeklyTicks
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Inspect(f func()) *mTickFinderMockFindWeeklyTicks {
	if mmFindWeeklyTicks.mock.inspectFuncFindWeeklyTicks != nil {
		mmFindWeeklyTicks.mock.t.Fatalf("Inspect function is already set for TickFinderMock.FindWeeklyTicks")
	}

	mmFindWeeklyTicks.mock.inspectFuncFindWeeklyTicks = f

	return mmFindWeeklyTicks
}

// Return sets up results that will be returned by tickFinder.FindWeeklyTicks
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Return() *TickFinderMock {
	if mmFindWeeklyTicks.mock.funcFindWeeklyTicks != nil {
		mmFindWeeklyTicks.mock.t.Fatalf("TickFinderMock.FindWeeklyTicks mock is already set by Set")
	}

	if mmFindWeeklyTicks.defaultExpectation == nil {
		mmFindWeeklyTicks.defaultExpectation = &TickFinderMockFindWeeklyTicksExpectation{mock: mmFindWeeklyTicks.mock}
	}

	mmFindWeeklyTicks.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmFindWeeklyTicks.mock
}

// Set uses given function f to mock the tickFinder.FindWeeklyTicks method
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Set(f func()) *TickFinderMock {
	if mmFindWeeklyTicks.defaultExpectation != nil {
		mmFindWeeklyTicks.mock.t.Fatalf("Default expectation is already set for the tickFinder.FindWeeklyTicks method")
	}

	if len(mmFindWeeklyTicks.expectations) > 0 {
		mmFindWeeklyTicks.mock.t.Fatalf("Some expectations are already set for the tickFinder.FindWeeklyTicks method")
	}

	mmFindWeeklyTicks.mock.funcFindWeeklyTicks = f
	mmFindWeeklyTicks.mock.funcFindWeeklyTicksOrigin = minimock.CallerInfo(1)
	return mmFindWeeklyTicks.mock
}

// Times sets number of times tickFinder.FindWeeklyTicks should be invoked
func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) Times(n uint64) *mTickFinderMockFindWeeklyTicks {
	if n == 0 {
		mmFindWeeklyTicks.mock.t.Fatalf("Times of TickFinderMock.FindWeeklyTicks mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmFindWeeklyTicks.expectedInvocations, n)
	mmFindWeeklyTicks.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmFindWeeklyTicks
}

func (mmFindWeeklyTicks *mTickFinderMockFindWeeklyTicks) invocationsDone() bool {
	if len(mmFindWeeklyTicks.expectations) == 0 && mmFindWeeklyTicks.defaultExpectation == nil && mmFindWeeklyTicks.mock.funcFindWeeklyTicks == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmFindWeeklyTicks.mock.afterFindWeeklyTicksCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmFindWeeklyTicks.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// FindWeeklyTicks implements mm_habit.tickFinder
func (mmFindWeeklyTicks *TickFinderMock) FindWeeklyTicks() {
	mm_atomic.AddUint64(&mmFindWeeklyTicks.beforeFindWeeklyTicksCounter, 1)
	defer mm_atomic.AddUint64(&mmFindWeeklyTicks.afterFindWeeklyTicksCounter, 1)

	mmFindWeeklyTicks.t.Helper()

	if mmFindWeeklyTicks.inspectFuncFindWeeklyTicks != nil {
		mmFindWeeklyTicks.inspectFuncFindWeeklyTicks()
	}

	if mmFindWeeklyTicks.FindWeeklyTicksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindWeeklyTicks.FindWeeklyTicksMock.defaultExpectation.Counter, 1)

		return

	}
	if mmFindWeeklyTicks.funcFindWeeklyTicks != nil {
		mmFindWeeklyTicks.funcFindWeeklyTicks()
		return
	}
	mmFindWeeklyTicks.t.Fatalf("Unexpected call to TickFinderMock.FindWeeklyTicks.")

}

// FindWeeklyTicksAfterCounter returns a count of finished TickFinderMock.FindWeeklyTicks invocations
func (mmFindWeeklyTicks *TickFinderMock) FindWeeklyTicksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindWeeklyTicks.afterFindWeeklyTicksCounter)
}

// FindWeeklyTicksBeforeCounter returns a count of TickFinderMock.FindWeeklyTicks invocations
func (mmFindWeeklyTicks *TickFinderMock) FindWeeklyTicksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindWeeklyTicks.beforeFindWeeklyTicksCounter)
}

// MinimockFindWeeklyTicksDone returns true if the count of the FindWeeklyTicks invocations corresponds
// the number of defined expectations
func (m *TickFinderMock) MinimockFindWeeklyTicksDone() bool {
	if m.FindWeeklyTicksMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.FindWeeklyTicksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.FindWeeklyTicksMock.invocationsDone()
}

// MinimockFindWeeklyTicksInspect logs each unmet expectation
func (m *TickFinderMock) MinimockFindWeeklyTicksInspect() {
	for _, e := range m.FindWeeklyTicksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TickFinderMock.FindWeeklyTicks")
		}
	}

	afterFindWeeklyTicksCounter := mm_atomic.LoadUint64(&m.afterFindWeeklyTicksCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.FindWeeklyTicksMock.defaultExpectation != nil && afterFindWeeklyTicksCounter < 1 {
		m.t.Errorf("Expected call to TickFinderMock.FindWeeklyTicks at\n%s", m.FindWeeklyTicksMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindWeeklyTicks != nil && afterFindWeeklyTicksCounter < 1 {
		m.t.Errorf("Expected call to TickFinderMock.FindWeeklyTicks at\n%s", m.funcFindWeeklyTicksOrigin)
	}

	if !m.FindWeeklyTicksMock.invocationsDone() && afterFindWeeklyTicksCounter > 0 {
		m.t.Errorf("Expected %d calls to TickFinderMock.FindWeeklyTicks at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.FindWeeklyTicksMock.expectedInvocations), m.FindWeeklyTicksMock.expectedInvocationsOrigin, afterFindWeeklyTicksCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TickFinderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockFindWeeklyTicksInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TickFinderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TickFinderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindWeeklyTicksDone()
}
