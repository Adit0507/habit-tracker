// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i habits/internal/habit.habitFinder -o habit_finder_mock.go -n HabitFinderMock -p mocks

import (
	"context"
	mm_habit "habits/internal/habit"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HabitFinderMock implements mm_habit.habitFinder
type HabitFinderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcFind          func(ctx context.Context, id mm_habit.ID) (h1 mm_habit.Habit, err error)
	funcFindOrigin    string
	inspectFuncFind   func(ctx context.Context, id mm_habit.ID)
	afterFindCounter  uint64
	beforeFindCounter uint64
	FindMock          mHabitFinderMockFind
}

// NewHabitFinderMock returns a mock for mm_habit.habitFinder
func NewHabitFinderMock(t minimock.Tester) *HabitFinderMock {
	m := &HabitFinderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindMock = mHabitFinderMockFind{mock: m}
	m.FindMock.callArgs = []*HabitFinderMockFindParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHabitFinderMockFind struct {
	optional           bool
	mock               *HabitFinderMock
	defaultExpectation *HabitFinderMockFindExpectation
	expectations       []*HabitFinderMockFindExpectation

	callArgs []*HabitFinderMockFindParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HabitFinderMockFindExpectation specifies expectation struct of the habitFinder.Find
type HabitFinderMockFindExpectation struct {
	mock               *HabitFinderMock
	params             *HabitFinderMockFindParams
	paramPtrs          *HabitFinderMockFindParamPtrs
	expectationOrigins HabitFinderMockFindExpectationOrigins
	results            *HabitFinderMockFindResults
	returnOrigin       string
	Counter            uint64
}

// HabitFinderMockFindParams contains parameters of the habitFinder.Find
type HabitFinderMockFindParams struct {
	ctx context.Context
	id  mm_habit.ID
}

// HabitFinderMockFindParamPtrs contains pointers to parameters of the habitFinder.Find
type HabitFinderMockFindParamPtrs struct {
	ctx *context.Context
	id  *mm_habit.ID
}

// HabitFinderMockFindResults contains results of the habitFinder.Find
type HabitFinderMockFindResults struct {
	h1  mm_habit.Habit
	err error
}

// HabitFinderMockFindOrigins contains origins of expectations of the habitFinder.Find
type HabitFinderMockFindExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmFind *mHabitFinderMockFind) Optional() *mHabitFinderMockFind {
	mmFind.optional = true
	return mmFind
}

// Expect sets up expected params for habitFinder.Find
func (mmFind *mHabitFinderMockFind) Expect(ctx context.Context, id mm_habit.ID) *mHabitFinderMockFind {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &HabitFinderMockFindExpectation{}
	}

	if mmFind.defaultExpectation.paramPtrs != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by ExpectParams functions")
	}

	mmFind.defaultExpectation.params = &HabitFinderMockFindParams{ctx, id}
	mmFind.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmFind.expectations {
		if minimock.Equal(e.params, mmFind.defaultExpectation.params) {
			mmFind.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFind.defaultExpectation.params)
		}
	}

	return mmFind
}

// ExpectCtxParam1 sets up expected param ctx for habitFinder.Find
func (mmFind *mHabitFinderMockFind) ExpectCtxParam1(ctx context.Context) *mHabitFinderMockFind {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &HabitFinderMockFindExpectation{}
	}

	if mmFind.defaultExpectation.params != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Expect")
	}

	if mmFind.defaultExpectation.paramPtrs == nil {
		mmFind.defaultExpectation.paramPtrs = &HabitFinderMockFindParamPtrs{}
	}
	mmFind.defaultExpectation.paramPtrs.ctx = &ctx
	mmFind.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmFind
}

// ExpectIdParam2 sets up expected param id for habitFinder.Find
func (mmFind *mHabitFinderMockFind) ExpectIdParam2(id mm_habit.ID) *mHabitFinderMockFind {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &HabitFinderMockFindExpectation{}
	}

	if mmFind.defaultExpectation.params != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Expect")
	}

	if mmFind.defaultExpectation.paramPtrs == nil {
		mmFind.defaultExpectation.paramPtrs = &HabitFinderMockFindParamPtrs{}
	}
	mmFind.defaultExpectation.paramPtrs.id = &id
	mmFind.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmFind
}

// Inspect accepts an inspector function that has same arguments as the habitFinder.Find
func (mmFind *mHabitFinderMockFind) Inspect(f func(ctx context.Context, id mm_habit.ID)) *mHabitFinderMockFind {
	if mmFind.mock.inspectFuncFind != nil {
		mmFind.mock.t.Fatalf("Inspect function is already set for HabitFinderMock.Find")
	}

	mmFind.mock.inspectFuncFind = f

	return mmFind
}

// Return sets up results that will be returned by habitFinder.Find
func (mmFind *mHabitFinderMockFind) Return(h1 mm_habit.Habit, err error) *HabitFinderMock {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &HabitFinderMockFindExpectation{mock: mmFind.mock}
	}
	mmFind.defaultExpectation.results = &HabitFinderMockFindResults{h1, err}
	mmFind.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmFind.mock
}

// Set uses given function f to mock the habitFinder.Find method
func (mmFind *mHabitFinderMockFind) Set(f func(ctx context.Context, id mm_habit.ID) (h1 mm_habit.Habit, err error)) *HabitFinderMock {
	if mmFind.defaultExpectation != nil {
		mmFind.mock.t.Fatalf("Default expectation is already set for the habitFinder.Find method")
	}

	if len(mmFind.expectations) > 0 {
		mmFind.mock.t.Fatalf("Some expectations are already set for the habitFinder.Find method")
	}

	mmFind.mock.funcFind = f
	mmFind.mock.funcFindOrigin = minimock.CallerInfo(1)
	return mmFind.mock
}

// When sets expectation for the habitFinder.Find which will trigger the result defined by the following
// Then helper
func (mmFind *mHabitFinderMockFind) When(ctx context.Context, id mm_habit.ID) *HabitFinderMockFindExpectation {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("HabitFinderMock.Find mock is already set by Set")
	}

	expectation := &HabitFinderMockFindExpectation{
		mock:               mmFind.mock,
		params:             &HabitFinderMockFindParams{ctx, id},
		expectationOrigins: HabitFinderMockFindExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmFind.expectations = append(mmFind.expectations, expectation)
	return expectation
}

// Then sets up habitFinder.Find return parameters for the expectation previously defined by the When method
func (e *HabitFinderMockFindExpectation) Then(h1 mm_habit.Habit, err error) *HabitFinderMock {
	e.results = &HabitFinderMockFindResults{h1, err}
	return e.mock
}

// Times sets number of times habitFinder.Find should be invoked
func (mmFind *mHabitFinderMockFind) Times(n uint64) *mHabitFinderMockFind {
	if n == 0 {
		mmFind.mock.t.Fatalf("Times of HabitFinderMock.Find mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmFind.expectedInvocations, n)
	mmFind.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmFind
}

func (mmFind *mHabitFinderMockFind) invocationsDone() bool {
	if len(mmFind.expectations) == 0 && mmFind.defaultExpectation == nil && mmFind.mock.funcFind == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmFind.mock.afterFindCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmFind.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Find implements mm_habit.habitFinder
func (mmFind *HabitFinderMock) Find(ctx context.Context, id mm_habit.ID) (h1 mm_habit.Habit, err error) {
	mm_atomic.AddUint64(&mmFind.beforeFindCounter, 1)
	defer mm_atomic.AddUint64(&mmFind.afterFindCounter, 1)

	mmFind.t.Helper()

	if mmFind.inspectFuncFind != nil {
		mmFind.inspectFuncFind(ctx, id)
	}

	mm_params := HabitFinderMockFindParams{ctx, id}

	// Record call args
	mmFind.FindMock.mutex.Lock()
	mmFind.FindMock.callArgs = append(mmFind.FindMock.callArgs, &mm_params)
	mmFind.FindMock.mutex.Unlock()

	for _, e := range mmFind.FindMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1, e.results.err
		}
	}

	if mmFind.FindMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFind.FindMock.defaultExpectation.Counter, 1)
		mm_want := mmFind.FindMock.defaultExpectation.params
		mm_want_ptrs := mmFind.FindMock.defaultExpectation.paramPtrs

		mm_got := HabitFinderMockFindParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmFind.t.Errorf("HabitFinderMock.Find got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmFind.FindMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmFind.t.Errorf("HabitFinderMock.Find got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmFind.FindMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFind.t.Errorf("HabitFinderMock.Find got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmFind.FindMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFind.FindMock.defaultExpectation.results
		if mm_results == nil {
			mmFind.t.Fatal("No results are set for the HabitFinderMock.Find")
		}
		return (*mm_results).h1, (*mm_results).err
	}
	if mmFind.funcFind != nil {
		return mmFind.funcFind(ctx, id)
	}
	mmFind.t.Fatalf("Unexpected call to HabitFinderMock.Find. %v %v", ctx, id)
	return
}

// FindAfterCounter returns a count of finished HabitFinderMock.Find invocations
func (mmFind *HabitFinderMock) FindAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.afterFindCounter)
}

// FindBeforeCounter returns a count of HabitFinderMock.Find invocations
func (mmFind *HabitFinderMock) FindBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.beforeFindCounter)
}

// Calls returns a list of arguments used in each call to HabitFinderMock.Find.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFind *mHabitFinderMockFind) Calls() []*HabitFinderMockFindParams {
	mmFind.mutex.RLock()

	argCopy := make([]*HabitFinderMockFindParams, len(mmFind.callArgs))
	copy(argCopy, mmFind.callArgs)

	mmFind.mutex.RUnlock()

	return argCopy
}

// MinimockFindDone returns true if the count of the Find invocations corresponds
// the number of defined expectations
func (m *HabitFinderMock) MinimockFindDone() bool {
	if m.FindMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.FindMock.invocationsDone()
}

// MinimockFindInspect logs each unmet expectation
func (m *HabitFinderMock) MinimockFindInspect() {
	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HabitFinderMock.Find at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterFindCounter := mm_atomic.LoadUint64(&m.afterFindCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.FindMock.defaultExpectation != nil && afterFindCounter < 1 {
		if m.FindMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HabitFinderMock.Find at\n%s", m.FindMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HabitFinderMock.Find at\n%s with params: %#v", m.FindMock.defaultExpectation.expectationOrigins.origin, *m.FindMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFind != nil && afterFindCounter < 1 {
		m.t.Errorf("Expected call to HabitFinderMock.Find at\n%s", m.funcFindOrigin)
	}

	if !m.FindMock.invocationsDone() && afterFindCounter > 0 {
		m.t.Errorf("Expected %d calls to HabitFinderMock.Find at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.FindMock.expectedInvocations), m.FindMock.expectedInvocationsOrigin, afterFindCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HabitFinderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockFindInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HabitFinderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HabitFinderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindDone()
}
